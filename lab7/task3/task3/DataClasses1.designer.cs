#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace task3
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="Metro")]
	public partial class DataClasses1DataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Определения метода расширяемости
    partial void OnCreated();
    partial void InsertTrainsT(TrainsT instance);
    partial void UpdateTrainsT(TrainsT instance);
    partial void DeleteTrainsT(TrainsT instance);
    partial void InsertStationsT(StationsT instance);
    partial void UpdateStationsT(StationsT instance);
    partial void DeleteStationsT(StationsT instance);
    partial void InsertLinesT(LinesT instance);
    partial void UpdateLinesT(LinesT instance);
    partial void DeleteLinesT(LinesT instance);
    #endregion
		
		public DataClasses1DataContext() : 
				base(global::task3.Properties.Settings.Default.MetroConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<TrainsT> TrainsT
		{
			get
			{
				return this.GetTable<TrainsT>();
			}
		}
		
		public System.Data.Linq.Table<StationsT> StationsT
		{
			get
			{
				return this.GetTable<StationsT>();
			}
		}
		
		public System.Data.Linq.Table<LinkerT> LinkerT
		{
			get
			{
				return this.GetTable<LinkerT>();
			}
		}
		
		public System.Data.Linq.Table<LinesT> LinesT
		{
			get
			{
				return this.GetTable<LinesT>();
			}
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.GetPassengers")]
		public int GetPassengers([global::System.Data.Linq.Mapping.ParameterAttribute(Name="Pass", DbType="Int")] System.Nullable<int> pass)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), pass);
			return ((int)(result.ReturnValue));
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TrainsT")]
	public partial class TrainsT : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _BuildDate;
		
		private int _LineID;
		
		private int _MaxPassengers;
		
		private int _MaxVagon;
		
		private string _Train;
		
		private int _TrainID;
		
		private EntityRef<LinesT> _LinesT;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnBuildDateChanging(int value);
    partial void OnBuildDateChanged();
    partial void OnLineIDChanging(int value);
    partial void OnLineIDChanged();
    partial void OnMaxPassengersChanging(int value);
    partial void OnMaxPassengersChanged();
    partial void OnMaxVagonChanging(int value);
    partial void OnMaxVagonChanged();
    partial void OnTrainChanging(string value);
    partial void OnTrainChanged();
    partial void OnTrainIDChanging(int value);
    partial void OnTrainIDChanged();
    #endregion
		
		public TrainsT()
		{
			this._LinesT = default(EntityRef<LinesT>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BuildDate", DbType="Int NOT NULL")]
		public int BuildDate
		{
			get
			{
				return this._BuildDate;
			}
			set
			{
				if ((this._BuildDate != value))
				{
					this.OnBuildDateChanging(value);
					this.SendPropertyChanging();
					this._BuildDate = value;
					this.SendPropertyChanged("BuildDate");
					this.OnBuildDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LineID", DbType="Int NOT NULL")]
		public int LineID
		{
			get
			{
				return this._LineID;
			}
			set
			{
				if ((this._LineID != value))
				{
					if (this._LinesT.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLineIDChanging(value);
					this.SendPropertyChanging();
					this._LineID = value;
					this.SendPropertyChanged("LineID");
					this.OnLineIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MaxPassengers", DbType="Int NOT NULL")]
		public int MaxPassengers
		{
			get
			{
				return this._MaxPassengers;
			}
			set
			{
				if ((this._MaxPassengers != value))
				{
					this.OnMaxPassengersChanging(value);
					this.SendPropertyChanging();
					this._MaxPassengers = value;
					this.SendPropertyChanged("MaxPassengers");
					this.OnMaxPassengersChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MaxVagon", DbType="Int NOT NULL")]
		public int MaxVagon
		{
			get
			{
				return this._MaxVagon;
			}
			set
			{
				if ((this._MaxVagon != value))
				{
					this.OnMaxVagonChanging(value);
					this.SendPropertyChanging();
					this._MaxVagon = value;
					this.SendPropertyChanged("MaxVagon");
					this.OnMaxVagonChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Train", DbType="NVarChar(20) NOT NULL", CanBeNull=false)]
		public string Train
		{
			get
			{
				return this._Train;
			}
			set
			{
				if ((this._Train != value))
				{
					this.OnTrainChanging(value);
					this.SendPropertyChanging();
					this._Train = value;
					this.SendPropertyChanged("Train");
					this.OnTrainChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TrainID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int TrainID
		{
			get
			{
				return this._TrainID;
			}
			set
			{
				if ((this._TrainID != value))
				{
					this.OnTrainIDChanging(value);
					this.SendPropertyChanging();
					this._TrainID = value;
					this.SendPropertyChanged("TrainID");
					this.OnTrainIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LinesT_TrainsT", Storage="_LinesT", ThisKey="LineID", OtherKey="LineID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public LinesT LinesT
		{
			get
			{
				return this._LinesT.Entity;
			}
			set
			{
				LinesT previousValue = this._LinesT.Entity;
				if (((previousValue != value) 
							|| (this._LinesT.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LinesT.Entity = null;
						previousValue.TrainsT.Remove(this);
					}
					this._LinesT.Entity = value;
					if ((value != null))
					{
						value.TrainsT.Add(this);
						this._LineID = value.LineID;
					}
					else
					{
						this._LineID = default(int);
					}
					this.SendPropertyChanged("LinesT");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.StationsT")]
	public partial class StationsT : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Station;
		
		private string _Admarea;
		
		private string _District;
		
		private string _StatusS;
		
		private int _StationID;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnStationChanging(string value);
    partial void OnStationChanged();
    partial void OnAdmareaChanging(string value);
    partial void OnAdmareaChanged();
    partial void OnDistrictChanging(string value);
    partial void OnDistrictChanged();
    partial void OnStatusSChanging(string value);
    partial void OnStatusSChanged();
    partial void OnStationIDChanging(int value);
    partial void OnStationIDChanged();
    #endregion
		
		public StationsT()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Station", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string Station
		{
			get
			{
				return this._Station;
			}
			set
			{
				if ((this._Station != value))
				{
					this.OnStationChanging(value);
					this.SendPropertyChanging();
					this._Station = value;
					this.SendPropertyChanged("Station");
					this.OnStationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Admarea", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string Admarea
		{
			get
			{
				return this._Admarea;
			}
			set
			{
				if ((this._Admarea != value))
				{
					this.OnAdmareaChanging(value);
					this.SendPropertyChanging();
					this._Admarea = value;
					this.SendPropertyChanged("Admarea");
					this.OnAdmareaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_District", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string District
		{
			get
			{
				return this._District;
			}
			set
			{
				if ((this._District != value))
				{
					this.OnDistrictChanging(value);
					this.SendPropertyChanging();
					this._District = value;
					this.SendPropertyChanged("District");
					this.OnDistrictChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StatusS", DbType="NVarChar(40) NOT NULL", CanBeNull=false)]
		public string StatusS
		{
			get
			{
				return this._StatusS;
			}
			set
			{
				if ((this._StatusS != value))
				{
					this.OnStatusSChanging(value);
					this.SendPropertyChanging();
					this._StatusS = value;
					this.SendPropertyChanged("StatusS");
					this.OnStatusSChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StationID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int StationID
		{
			get
			{
				return this._StationID;
			}
			set
			{
				if ((this._StationID != value))
				{
					this.OnStationIDChanging(value);
					this.SendPropertyChanging();
					this._StationID = value;
					this.SendPropertyChanged("StationID");
					this.OnStationIDChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.LinkerT")]
	public partial class LinkerT
	{
		
		private int _StationID;
		
		private int _LineID;
		
		private int _Vagons;
		
		private int _Passangers;
		
		public LinkerT()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StationID", DbType="Int NOT NULL")]
		public int StationID
		{
			get
			{
				return this._StationID;
			}
			set
			{
				if ((this._StationID != value))
				{
					this._StationID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LineID", DbType="Int NOT NULL")]
		public int LineID
		{
			get
			{
				return this._LineID;
			}
			set
			{
				if ((this._LineID != value))
				{
					this._LineID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Vagons", DbType="Int NOT NULL")]
		public int Vagons
		{
			get
			{
				return this._Vagons;
			}
			set
			{
				if ((this._Vagons != value))
				{
					this._Vagons = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Passangers", DbType="Int NOT NULL")]
		public int Passangers
		{
			get
			{
				return this._Passangers;
			}
			set
			{
				if ((this._Passangers != value))
				{
					this._Passangers = value;
				}
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.LinesT")]
	public partial class LinesT : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Line;
		
		private int _LineID;
		
		private string _StatusS;
		
		private EntitySet<TrainsT> _TrainsT;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnLineChanging(string value);
    partial void OnLineChanged();
    partial void OnLineIDChanging(int value);
    partial void OnLineIDChanged();
    partial void OnStatusSChanging(string value);
    partial void OnStatusSChanged();
    #endregion
		
		public LinesT()
		{
			this._TrainsT = new EntitySet<TrainsT>(new Action<TrainsT>(this.attach_TrainsT), new Action<TrainsT>(this.detach_TrainsT));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Line", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string Line
		{
			get
			{
				return this._Line;
			}
			set
			{
				if ((this._Line != value))
				{
					this.OnLineChanging(value);
					this.SendPropertyChanging();
					this._Line = value;
					this.SendPropertyChanged("Line");
					this.OnLineChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LineID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int LineID
		{
			get
			{
				return this._LineID;
			}
			set
			{
				if ((this._LineID != value))
				{
					this.OnLineIDChanging(value);
					this.SendPropertyChanging();
					this._LineID = value;
					this.SendPropertyChanged("LineID");
					this.OnLineIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StatusS", DbType="NVarChar(25) NOT NULL", CanBeNull=false)]
		public string StatusS
		{
			get
			{
				return this._StatusS;
			}
			set
			{
				if ((this._StatusS != value))
				{
					this.OnStatusSChanging(value);
					this.SendPropertyChanging();
					this._StatusS = value;
					this.SendPropertyChanged("StatusS");
					this.OnStatusSChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LinesT_TrainsT", Storage="_TrainsT", ThisKey="LineID", OtherKey="LineID")]
		public EntitySet<TrainsT> TrainsT
		{
			get
			{
				return this._TrainsT;
			}
			set
			{
				this._TrainsT.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_TrainsT(TrainsT entity)
		{
			this.SendPropertyChanging();
			entity.LinesT = this;
		}
		
		private void detach_TrainsT(TrainsT entity)
		{
			this.SendPropertyChanging();
			entity.LinesT = null;
		}
	}
}
#pragma warning restore 1591
